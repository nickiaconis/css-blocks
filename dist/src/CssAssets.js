"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const async = require("async");
const convertSourceMap = require("convert-source-map");
const debugGenerator = require("debug");
const fs = require("fs");
const opticss_1 = require("opticss");
const path = require("path");
const webpack_sources_1 = require("webpack-sources");
const debug = debugGenerator("css-blocks:webpack:assets");
function isPostcssProcessor(processor) {
    return !!processor.postcss;
}
function isGenericProcessor(processor) {
    return !!processor.processor;
}
class CssAssets {
    constructor(options) {
        let defaultOpts = { cssFiles: {}, concat: {}, emitSourceMaps: true, inlineSourceMaps: false };
        this.options = Object.assign(defaultOpts, options);
    }
    apply(compiler) {
        // install assets
        // This puts assets into the compilation results but they won't be part of
        // any chunk. the cssFiles option is an object where the keys are
        // the asset to be added into the compilation results. The value
        // can be a path relative to the webpack project root or an absolute path.
        // TODO: get the watcher to watch these files on disk
        // TODO: Use loaders to get these files into the assets -- which may help with the watching.
        compiler.plugin("emit", (compilation, cb) => {
            debug("emitting assets");
            let assetPaths = Object.keys(this.options.cssFiles);
            async.forEach(assetPaths, (assetPath, outputCallback) => {
                let asset = this.options.cssFiles[assetPath];
                let sourcePath, chunkName = undefined;
                if (typeof asset === "string" || Array.isArray(asset)) {
                    sourcePath = asset;
                }
                else {
                    sourcePath = asset.source;
                    chunkName = asset.chunk;
                }
                let chunks = compilation.chunks;
                let chunk = chunkName && chunks.find(c => c.name === chunkName);
                if (chunkName && !chunk) {
                    throw new Error(`No chunk named ${chunkName} found.`);
                }
                const handleSource = (err, source) => {
                    if (err) {
                        outputCallback(err);
                    }
                    else {
                        compilation.assets[assetPath] = source;
                        if (chunk) {
                            chunk.files.push(assetPath);
                        }
                        outputCallback();
                    }
                };
                if (Array.isArray(sourcePath)) {
                    const sourcePaths = sourcePath.map(sourcePath => path.resolve(compiler.options.context, sourcePath));
                    assetFilesAsSource(sourcePaths, handleSource);
                }
                else {
                    assetFileAsSource(path.resolve(compiler.options.context, sourcePath), handleSource);
                }
            }, cb);
        });
        // Concatenation
        // The concat option is an object where the keys are the
        // concatenated asset path and the value is an array of
        // strings of assets that should be in the asset.
        // TODO: maybe some glob or regex support
        compiler.plugin("emit", (compilation, cb) => {
            debug("concatenating assets");
            if (!this.options.concat)
                return;
            let concatFiles = Object.keys(this.options.concat);
            let postProcessResults = new Array();
            for (let concatFile of concatFiles) {
                let concatSource = new webpack_sources_1.ConcatSource();
                let concatenation = this.options.concat[concatFile];
                let inputFiles = Array.isArray(concatenation) ? concatenation : concatenation.sources;
                let concatenationOptions = Array.isArray(concatenation) ? { sources: concatenation } : concatenation;
                let missingFiles = inputFiles.filter(f => (!compilation.assets[f]));
                let chunks = new Set();
                if (missingFiles.length === 0) {
                    for (let inputFile of inputFiles) {
                        let asset = compilation.assets[inputFile];
                        concatSource.add(asset);
                        let chunksWithInputAsset = compilation.chunks.filter((chunk) => chunk.files.indexOf(inputFile) >= 0);
                        chunksWithInputAsset.forEach((chunk) => {
                            chunks.add(chunk);
                            let files = chunk.files;
                            chunk.files = files.filter(file => file !== inputFile);
                        });
                        if (!concatenationOptions.preserveSourceFiles) {
                            delete compilation.assets[inputFile];
                        }
                    }
                    if (concatenationOptions.postProcess) {
                        postProcessResults.push(postProcess(concatenationOptions.postProcess, concatSource, concatFile).then(source => {
                            compilation.assets[concatFile] = source;
                        }));
                    }
                    else {
                        compilation.assets[concatFile] = concatSource;
                    }
                }
                for (let chunk of chunks) {
                    let files = chunk.files;
                    if (files.indexOf(concatFile) >= 0)
                        continue;
                    files.push(concatFile);
                }
            }
            if (postProcessResults.length > 0) {
                Promise.all(postProcessResults).then(() => {
                    cb();
                }, error => {
                    cb(error);
                });
            }
            else {
                cb();
            }
        });
        // sourcemap output for css files
        // Emit all css files with sourcemaps when the `emitSourceMaps` option
        // is set to true (default). By default source maps are generated as a
        // separate file but they can be inline by setting `inlineSourceMaps` to
        // true (false by default)
        compiler.plugin("emit", (compilation, cb) => {
            if (!this.options.emitSourceMaps) {
                debug("not adding sourcemaps");
                cb();
                return;
            }
            debug("adding sourcemaps");
            let assetPaths = Object.keys(compilation.assets).filter(p => /\.css$/.test(p));
            assetPaths.forEach(assetPath => {
                let asset = compilation.assets[assetPath];
                let { source, map } = sourceAndMap(asset);
                if (map) {
                    let comment;
                    if (this.options.inlineSourceMaps) {
                        comment = convertSourceMap.fromObject(map).toComment({ multiline: true });
                    }
                    else {
                        let mapPath = assetPath + ".map";
                        comment = `/*# sourceMappingURL=${path.basename(mapPath)} */`;
                        compilation.assets[mapPath] = new webpack_sources_1.RawSource(JSON.stringify(map));
                    }
                    compilation.assets[assetPath] = new webpack_sources_1.RawSource(source + "\n" + comment);
                }
            });
            cb();
        });
    }
}
exports.CssAssets = CssAssets;
function assetAsSource(contents, filename) {
    let sourcemap;
    if (/sourceMappingURL/.test(contents)) {
        sourcemap = convertSourceMap.fromSource(contents) ||
            convertSourceMap.fromMapFileComment(contents, path.dirname(filename));
    }
    if (sourcemap) {
        let sm = sourcemap.toObject();
        contents = convertSourceMap.removeComments(contents);
        contents = convertSourceMap.removeMapFileComments(contents);
        return new webpack_sources_1.SourceMapSource(contents, filename, sm);
    }
    else {
        return new webpack_sources_1.RawSource(contents);
    }
}
function assetFilesAsSource(filenames, callback) {
    let assetSource = new webpack_sources_1.ConcatSource();
    let assetFiles = filenames.slice();
    let eachAssetFile = (err) => {
        if (err) {
            callback(err);
        }
        else {
            const nextAssetFile = assetFiles.shift();
            if (nextAssetFile) {
                processAsset(nextAssetFile, eachAssetFile);
            }
            else {
                callback(undefined, assetSource);
            }
        }
    };
    const firstAssetFile = assetFiles.shift();
    if (firstAssetFile) {
        processAsset(firstAssetFile, eachAssetFile);
    }
    else {
        callback(new Error("No asset files provided."));
    }
    function processAsset(assetPath, assetCallback) {
        fs.readFile(assetPath, "utf-8", (err, data) => {
            if (err) {
                assetCallback(err);
            }
            else {
                assetSource.add(assetAsSource(data, assetPath));
                assetCallback();
            }
        });
    }
}
function assetFileAsSource(sourcePath, callback) {
    fs.readFile(sourcePath, "utf-8", (err, contents) => {
        if (err) {
            callback(err);
        }
        else {
            try {
                callback(undefined, assetAsSource(contents, sourcePath));
            }
            catch (e) {
                callback(e);
            }
        }
    });
}
function sourceAndMap(asset) {
    // sourceAndMap is supposedly more efficient when implemented.
    if (asset.sourceAndMap) {
        return asset.sourceAndMap();
    }
    else {
        let source = asset.source();
        let map = undefined;
        if (asset.map) {
            map = asset.map();
        }
        return { source, map };
    }
}
function makePostcssProcessor(plugins) {
    return (asset, assetPath) => {
        let { source, map } = sourceAndMap(asset);
        let pluginsPromise;
        if (typeof plugins === "function") {
            pluginsPromise = Promise.resolve(plugins(assetPath));
        }
        else {
            if (plugins.length > 0) {
                pluginsPromise = Promise.resolve(plugins);
            }
            else {
                return Promise.resolve(asset);
            }
        }
        return pluginsPromise.then(plugins => {
            let processor = opticss_1.postcss(plugins);
            let result = processor.process(source, {
                to: assetPath,
                map: { prev: map, inline: false, annotation: false },
            });
            return result.then((result) => {
                return new webpack_sources_1.SourceMapSource(result.css, assetPath, result.map.toJSON(), source, map);
            });
        });
    };
}
function process(processor, asset, assetPath) {
    return Promise.resolve(processor(asset, assetPath));
}
function postProcess(option, asset, assetPath) {
    let promise;
    if (isPostcssProcessor(option)) {
        promise = process(makePostcssProcessor(option.postcss), asset, assetPath);
    }
    else {
        promise = Promise.resolve(asset);
    }
    if (isGenericProcessor(option)) {
        promise = promise.then(asset => {
            return process(option.processor, asset, assetPath);
        });
    }
    return promise;
}
//# sourceMappingURL=data:application/json;base64,